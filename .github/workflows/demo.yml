name: Deploy website
on:
  push:
    branches:
      - '**'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache deps
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  prepare:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Get build meta info
        if: contains(github.ref, 'REL/')
        id: meta
        run: |
          PACKAGE_JSON=$(cat package.json)
          CURRENT_VERSION=$(echo $PACKAGE_JSON | jq -r '.version')
          IFS='/' read -r -a BRANCH_PARTS <<< "${GITHUB_REF#refs/heads/}"
          TENANT=${BRANCH_PARTS[1]}
          ENVIRONMENT=${BRANCH_PARTS[2]}
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "TENANT=$TENANT" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
  build:
    needs: [test, prepare]
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.aza.outputs.uza }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish value
        id: aza
        run: find dist/assets/*.js -type f -execdir echo 'uza={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
      - name: Write info.txt
        if: contains(github.ref, 'REL/')
        run: |
          INFO="Frontend Info:\nBranch: ${GITHUB_REF#refs/heads/}\nVersion: $CURRENT_VERSION\nBuild Date: $(date)\nHash: $GITHUB_SHA"
          echo -e $INFO > ./dist/info.txt
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output file name
        run: echo ${{ needs.build.outputs.script-file }}
      - name: Deploy
        run: echo "Deploying..."
